# Copyright 2019 EUROCONTROL
# ==========================================
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
# following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
#    disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ==========================================
#
# Editorial note: this license is an instance of the BSD license template as provided by the Open Source Initiative:
# http://opensource.org/licenses/BSD-3-Clause
#
# Details on EUROCONTROL: http://www.eurocontrol.int

openapi: 3.0.0

servers:
  - description: SWIM Auth Server
    url: /auth-server/api/1.0
info:
  description: SWIM Auth Server
  version: "1.0.0"
  title: SWIM Auth Server API
#  contact:
#    email: you@your-company.com
#  license:
#    name: Apache 2.0
#    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: tokens
    description: Operations related to token retrieval
  - name: users
    description: Operations related users' creation and retrieval
  - name: admin
    description: Operations available only to admin users
paths:
  /token:
    post:
      tags:
        - tokens
      summary: creates a new token and returns it to the user for further usage of the APIs
      operationId: auth_server.endpoints.tokens.create_token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPost'
      responses:
        '201':
          description: new token is created and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/:
    get:
      tags:
        - tokens
        - admin
      summary: retrieves all the generated tokens
      operationId: auth_server.endpoints.tokens.get_tokens
      responses:
        '200':
          description: all the generated tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/:
    get:
      tags:
        - users
        - admin
      summary: retrieves all available users
      operationId: auth_server.endpoints.users.get_users
      responses:
        '200':
          description: lists all available users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - users
        - admin
      summary: creates a new user
      operationId: auth_server.endpoints.users.post_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
        description: user data to add
      responses:
        '201':
          description: user created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists or a general DB conflict
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{user_id}:
    get:
      tags:
        - users
        - admin
      summary: retrieves a user by its id
      operationId: auth_server.endpoints.users.get_user
      parameters:
        - in: path
          name: user_id
          description: the id of the requested user
          schema:
            type: integer
      responses:
        '200':
          description: the requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description:  user does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - users
        - admin
      summary: updates an existing user
      operationId: auth_server.endpoints.users.put_user
      parameters:
        - in: path
          name: user_id
          description: the id of the user to be updated
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPut'
      responses:
        '200':
          description: the requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description:  user does not exist
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists or a general DB conflict
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Token:
      type: object
      properties:
        access_token:
          type: string
    TokenPost:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    UserPost:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    UserPut:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: 'date-time'
        is_admin:
          type: boolean


    Error:
      description: Error structure (RFC 7807 compliant - https://tools.ietf.org/html/rfc7807)
      type: object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: A short, human-readable summary of the problem
          example: Internal Server Error
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
          example: The server has encountered an error during the request
        status:
          type: integer
          description: The HTTP response code
          example: 500
